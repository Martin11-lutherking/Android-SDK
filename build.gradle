buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.8.+'
        classpath 'com.github.dcendents:android-maven-plugin:1.0'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}
apply plugin: 'android-library'
apply plugin: 'android-maven'

repositories {
    mavenCentral()
}

//sourceSets {
//
//}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"
    sourceSets {


//        unitTest {
//            java.srcDirs =['test/java']
//            resources.srcDir file('test/res')
//        }
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }


//    configurations {
//        unitTestCompile.extendsFrom runtime
//        unitTestRuntime.extendsFrom unitTestCompile
//    }

    libraryVariants.all { variant ->
        task("generate${variant.name}Javadoc", type: Javadoc) {
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            ext.androidJar = "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            destinationDir = file('docs');
            exclude "**/impl/**";
            exclude "**/BuildConfig**";

            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        }
    }
}



dependencies {
//    unitTestCompile files("$project.buildDir/classes/release")
//    unitTestCompile 'junit:junit:4.10'
//    unitTestCompile 'org.robolectric:robolectric:2.1.+'
//    unitTestCompile 'com.google.android:android:4.4.+'
}
task coreLibJar(type: Jar) {
    from fileTree(dir: 'build/classes/release').matching { 'com/baasbox/android/**' }
}

//task unitTest(type : Test, dependsOn: assemble) {
//    testClassesDir = android.sourceSets.unitTest.output.classesDir
//    classpath = android.sourceSets.unitTest.runtimeClasspath
//}
//check.dependsOn unitTest

artifacts {
    archives coreLibJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:///home/eto/baasbox-android")
            pom.groupId = 'com.baasbox'
            pom.artifactId = 'baasbox-android'
            pom.version = '0.7.3-alpha'
        }
    }
}
install {
    repositories.mavenInstaller {
        pom.version = "0.7.3-SNAPSHOT"
        pom.groupId = "com.baasbox"
        pom.artifactId = "baasbox-android"
    }
}